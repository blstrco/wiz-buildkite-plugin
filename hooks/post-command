#!/bin/bash

set -uo pipefail

WIZ_DIR="$HOME/.wiz"
SCAN_TYPE="${BUILDKITE_PLUGIN_WIZ_SCAN_TYPE:-}"
CDK_PATH="${BUILDKITE_PLUGIN_WIZ_PATH:-}"
WIZ_API_ID="${WIZ_API_ID:-}"
DEPENDENCY_FILES=("package.json" "yarn.lock" "package-lock.json" "requirements.txt")
WORKING_BRANCH="${BUILDKITE_PULL_REQUEST_BASE_BRANCH:-$BUILDKITE_BRANCH}"

if [[ -z "${SCAN_TYPE}" ]]; then
    echo "Missing scan type. Possible values: 'iac', 'docker'"
    exit 1
fi

if [ "${SCAN_TYPE}" = "docker" ] && [[ -z "${BUILDKITE_PLUGIN_WIZ_IMAGE_ADDRESS:-}" ]]; then
    echo "Missing image address, docker scans require an adress to pull the image"
    exit 1
fi

if [ "${SCAN_TYPE}" = "iac" ] && [[ -z "${BUILDKITE_PLUGIN_WIZ_PATH:-}" ]]; then
    echo "Missing cdk.out path, IaC scans require a path with the cloudformation files"
    exit 1
fi

checkModifiedFiles() {
    # check if the PR/branch has touched any of the dependencies in the list
    # when we shallow clone, we can't diff the refs
    # so we need to find the diffs between our branch and pipeline branch
    # why 100? This is so we can find a merge base, this obviously is not a bullet proof solution
    # though, should be good enough --unshallow would convert this to a full clone (and be slightly slower)
    git fetch --depth=100 origin "+refs/heads/${WORKING_BRANCH}:refs/remotes/origin/${WORKING_BRANCH}"
    current_commit=$(git rev-parse FETCH_HEAD)
    git fetch --depth=100 origin "+refs/heads/${BUILDKITE_PIPELINE_DEFAULT_BRANCH}:refs/remotes/origin/${BUILDKITE_PIPELINE_DEFAULT_BRANCH}"
    tip_of_target=$(git rev-parse FETCH_HEAD)
    touched_files=$(git --no-pager diff --name-only "${tip_of_target}"..."${current_commit}")
    for dep in "${DEPENDENCY_FILES[@]}"; do
        if [[ $touched_files == *"$dep"* ]]; then
            # return early, save time
            return 0
        fi
    done
    return 1
}

#TODO move this to agent-startup so all agents have wiz setup to save time, possibly directly as cli
setupWiz() {
    echo "Setting up and authenticating wiz"
    # check if this is an incident, this is when we have hotfix in the build message
    # TODO make this configurable
    if [[ "$BUILDKITE_MESSAGE" =~ ^hotfix.* ]]; then
        echo "Check disabled for hotfixes. This is reserved for incident responses only, please use it with caution"
        exit 0
    fi

    if [ "${SCAN_TYPE}" = "docker" ]; then
        if checkModifiedFiles; then
            echo "Dependency files are modified, running a docker image scan"
        else
            echo "Scanning is disabled when dependency files are not modified"
            exit 0
        fi
    fi

    mkdir -p "$WIZ_DIR"
    # even though WIZ_API_ID is not a secret value, asking each pipeline to have it as env variable is cumbersome and makes rotating the keys
    # challenging. Get both values from secrets manager as a pair instead.
    if [[ -z "${WIZ_API_ID}" ]]; then
        WIZ_API_DETAILS=$(aws secretsmanager get-secret-value --secret-id global/buildkite/wiz-api-details --query "SecretString" --output text)
        WIZ_API_ID=${WIZ_API_DETAILS%:*}
        WIZ_API_SECRET=${WIZ_API_DETAILS#*:}
    else
        WIZ_API_SECRET=$(aws secretsmanager get-secret-value --secret-id global/buildkite/wiz-api-secret --query "SecretString" --output text)
    fi
    # if we can't query the secret, don't fail the build. this is a temporary measure until we can make this more resilient.
    if [[ -z "${WIZ_API_SECRET}" ]]; then
        echo "Error querying Wiz credentials :("
        # why exit 0? because we don't want this to fail the build
        exit 0
    fi
    docker run \
        --rm -it \
        --mount type=bind,src="$WIZ_DIR",dst=/cli \
        wiziocli.azurecr.io/wizcli:latest-amd64 \
        auth --id="$WIZ_API_ID" --secret "$WIZ_API_SECRET"
    # check that wiz-auth work expected, and a file in WIZ_DIR is created
    if [ -z "$(ls -A "$WIZ_DIR")" ]; then
        echo "Wiz authentication failed, please confirm that credentials are set for WIZ_API_ID and WIZ_API_SECRET"
        exit 1
    fi
}

#$1 type, $2 name, $3 pass/fail, $4 result file
buildAnnotation() {
    annotation_file=${RANDOM:0:2}-annotation.md
    docker_or_iac=$(if [ "$1" = "docker" ]; then echo "Wiz Docker Image Scan"; else echo "Wiz IaC Scan"; fi)
    pass_or_fail=$(if [ "$3" = true ]; then echo 'meets'; else echo 'does not meet'; fi)
    summary="${docker_or_iac} for ${2} ${pass_or_fail} policy requirements"
    # we need to create a new file to avoid conflicts, we need scan type, name, pass/fail
    cat <<EOF >>./"${annotation_file}"
<details>
<summary>$summary.</summary>

\`\`\`term
$(cat "$4")
\`\`\`

</details>
EOF
    printf "%b\n" "$(cat ./"${annotation_file}")"
}

dockerImageScan() {
    # TODO check feasibility of mount/mountWithLayers
    IMAGE="${BUILDKITE_PLUGIN_WIZ_IMAGE_ADDRESS:-}"
    # make sure local docker has the image
    docker pull "$IMAGE"
    docker run \
        --rm -it \
        --mount type=bind,src="$WIZ_DIR",dst=/cli,readonly \
        --mount type=bind,src="$PWD",dst=/scan \
        --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock,readonly \
        wiziocli.azurecr.io/wizcli:latest-amd64 \
        docker scan --image "$IMAGE" \
        --policy-hits-only \
        -f human \
        -o /scan/docker-scan-result,human,true
    exit_code="$?"
    image_name=$(echo "$IMAGE" | cut -d "/" -f 2)
    # FIXME: Linktree Specific Env. Var.
    # buildkite-agent artifact upload docker-scan-result --log-level info
    case $exit_code in
    0)
        buildAnnotation "docker" "$image_name" true "$PWD/docker-scan-result" | buildkite-agent annotate --append --style 'success' --context 'ctx-wiz-docker-success'
        exit 0
        ;;
    *)
        buildAnnotation "docker" "$image_name" false "$PWD/docker-scan-result" | buildkite-agent annotate --append --context 'ctx-wiz-docker-warning' --style 'warning'
        exit 0
        ;;
    esac
}

iacScan() {
    mkdir -p result templates
    # only scan templates
    cp "$CDK_PATH"/*.template.json templates
    docker run \
        --rm -it \
        --mount type=bind,src="$WIZ_DIR",dst=/cli,readonly \
        --mount type=bind,src="$PWD",dst=/scan \
        wiziocli.azurecr.io/wizcli:latest-amd64 \
        iac scan \
        --name "$BUILDKITE_PIPELINE_SLUG:$BUILDKITE_BRANCH:${BUILDKITE_COMMIT:0:8}" -f human -o /scan/result/output,human \
        --types 'Cloudformation' \
        --path "/scan/templates"
    exit_code="$?"
    case $exit_code in
    0)
        buildAnnotation "iac" "$BUILDKITE_LABEL" true "$PWD/result/output" | buildkite-agent annotate --append --context 'ctx-wiz-iac-success' --style 'success'
        ;;
    *)
        buildAnnotation "iac" "$BUILDKITE_LABEL" false "$PWD/result/output" | buildkite-agent annotate --append --context 'ctx-wiz-iac-warning' --style 'warning'
        ;;
    esac
    # buildkite-agent artifact upload "result/**/*" --log-level info
    # this post step will be used in template to check the step was run
    echo "${BUILDKITE_BUILD_ID}" > check-file && buildkite-agent artifact upload check-file
}

case "${SCAN_TYPE}" in
iac)
    setupWiz
    iacScan
    ;;
docker)
    setupWiz
    dockerImageScan
    ;;
esac
